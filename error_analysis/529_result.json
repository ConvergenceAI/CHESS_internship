{
    "pipeline_config": {
        "keyword_extraction": {
            "model": "gpt-4o-mini"
        },
        "entity_retrieval": {
            "embedding_model_name": "openai_embedding_3_large"
        },
        "context_retrieval": {
            "top_k": 5
        },
        "column_filtering": {
            "model": "gpt-4o"
        },
        "table_selection": {
            "model": "gpt-4o",
            "num_samples": 1
        },
        "column_selection": {
            "model": "gpt-4o",
            "num_samples": 1
        },
        "schema_selection_fusion": {
            "model": "gpt-4o",
            "num_samples": 1
        },
        "candidate_generation": {
            "model": "gpt-4o",
            "num_samples": 1
        },
        "revision": {
            "model": "gpt-4o",
            "num_samples": 1
        }
    },
    "keyword_extraction": [
        "names of sets",
        "Japanese translation",
        "Korean translation",
        "name",
        "language not like '%Japanese%'",
        "language = 'Korean'"
    ],
    "entity_retrieval": {
        "similar_columns": {
            "sets": [
                "name"
            ],
            "set_translations": [
                "translation",
                "language"
            ]
        },
        "similar_values": {
            "foreign_data": {
                "language": [
                    "Korean"
                ]
            },
            "set_translations": {
                "language": [
                    "Korean"
                ]
            }
        }
    },
    "context_retrieval": {
        "schema_with_descriptions": {
            "sets": {
                "name": {
                    "column_name": "",
                    "column_description": "The name of the set.",
                    "value_description": ""
                },
                "block": {
                    "column_name": "",
                    "column_description": "The block name the set was in.",
                    "value_description": ""
                },
                "ispartialpreview": {
                    "column_name": "is Partial Preview",
                    "column_description": "If the set is still in preview (spoiled). Preview sets do not have complete data.",
                    "value_description": ""
                },
                "isforeignonly": {
                    "column_name": "is Foreign Only",
                    "column_description": "If the set is available only outside the United States of America.",
                    "value_description": ""
                }
            },
            "set_translations": {
                "language": {
                    "column_name": "",
                    "column_description": "language of this card set",
                    "value_description": ""
                },
                "translation": {
                    "column_name": "",
                    "column_description": "translation of this card set",
                    "value_description": ""
                },
                "setcode": {
                    "column_name": "set code",
                    "column_description": "the set code for this set",
                    "value_description": ""
                }
            },
            "foreign_data": {
                "language": {
                    "column_name": "",
                    "column_description": "The foreign language of card.",
                    "value_description": ""
                },
                "name": {
                    "column_name": "",
                    "column_description": "The foreign name of the card.",
                    "value_description": ""
                }
            }
        }
    },
    "column_filtering": "Removed",
    "table_selection": {
        "tentative_schema": {
            "set_translations": [
                "id",
                "language",
                "setCode",
                "translation"
            ],
            "sets": [
                "id",
                "baseSetSize",
                "block",
                "booster",
                "code",
                "isFoilOnly",
                "isForeignOnly",
                "isNonFoilOnly",
                "isOnlineOnly",
                "isPartialPreview",
                "keyruneCode",
                "mcmId",
                "mcmIdExtras",
                "mcmName",
                "mtgoCode",
                "name",
                "parentCode",
                "releaseDate",
                "tcgplayerGroupId",
                "totalSetSize",
                "type"
            ]
        },
        "chain_of_thought_reasoning": "To find the names of sets which don't have Japanese translation but have Korean translation, we need to focus on the set_translations table which contains the language and setCode. We also need the sets table to get the name of the sets using the setCode. The set_translations table will help us filter out sets with Japanese translations and include those with Korean translations. The sets table will provide the actual names of these sets.",
        "selected_tables": [
            "set_translations",
            "sets"
        ]
    },
    "column_selection": {
        "selected_schema": {
            "set_translations": [
                "setCode",
                "language"
            ],
            "sets": [
                "name",
                "code"
            ]
        },
        "chain_of_thought_reasoning": "To answer the question, we need to identify sets that have a Korean translation but do not have a Japanese translation. This requires us to check the 'language' column in the 'set_translations' table for both 'Korean' and 'Japanese' translations. We also need the 'setCode' from 'set_translations' to link to the 'sets' table and retrieve the 'name' of the set. Therefore, we need the 'name' column from the 'sets' table."
    },
    "candidate_generation": {
        "chain_of_thought_reasoning": "First, identify sets that have a Korean translation by joining the sets and set_translations tables. Then, exclude sets that have a Japanese translation. Finally, select the names of the sets that meet these criteria.",
        "SQL": "SELECT T2.name FROM sets T2 WHERE T2.code IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language = 'Korean') AND T2.code NOT IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language LIKE '%Japanese%')"
    },
    "revision": {
        "chain_of_thought_reasoning": "To find the names of sets which don't have Japanese translation but have Korean translation, I need to use the set_translations table to filter the sets based on the language. I will use subqueries to check for the presence of Korean translation and the absence of Japanese translation. I will then join this result with the sets table to get the names of the sets.",
        "SQL": "SELECT T2.name FROM sets T2 WHERE T2.code IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language = 'Korean') AND T2.code NOT IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language LIKE '%Japanese%')"
    },
    "evaluation": {
        "Question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation.",
        "Evidence": "names of sets refers to name; doesn't have Japanese translation refers to language not like '%Japanese%'; have Korean translation refers to language = 'Korean'",
        "GOLD_SQL": "SELECT name FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE language = 'Korean' AND language NOT LIKE '%Japanese%' )",
        "candidate_generation": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Predicted SQL": "SELECT T2.name FROM sets T2 WHERE T2.code IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language = 'Korean') AND T2.code NOT IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language LIKE '%Japanese%')"
        },
        "revision": {
            "exec_res": 0,
            "exec_err": "incorrect answer",
            "Predicted SQL": "SELECT T2.name FROM sets T2 WHERE T2.code IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language = 'Korean') AND T2.code NOT IN (SELECT T1.setCode FROM set_translations T1 WHERE T1.language LIKE '%Japanese%')"
        }
    },
    "latency": 184.93717980384827,
    "cost": 0.033611499999999996,
    "module_latencies": {
        "keyword_extraction": 1.653543472290039,
        "entity_retrieval": 144.250874042511,
        "context_retrieval": 20.058614253997803,
        "table_selection": 6.235680341720581,
        "column_selection": 2.5592613220214844,
        "candidate_generation": 3.5976173877716064,
        "revision": 6.541196823120117,
        "evaluation": 0.040392160415649414
    },
    "module_costs": {
        "keyword_extraction": 0.00012345,
        "entity_retrieval": 0.00012805000000000008,
        "context_retrieval": 0,
        "table_selection": 0.00895,
        "column_selection": 0.006305,
        "candidate_generation": 0.00632,
        "revision": 0.011784999999999999,
        "evaluation": 0
    }
}